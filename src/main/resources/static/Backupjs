/* Array zur Speicherung der Text- und Farbeingaben und der zugehörigen Overlay-Elemente */
let textFields = [];

// Beim Laden der Seite direkt ein Textfeld hinzufügen
window.onload = function() {
    addTextField();
};

// Neues Textfeld (Text + Farbe) hinzufügen
function addTextField() {
    const row = document.createElement('div');
    row.className = 'text-field-row';

    const textInput = document.createElement('input');
    textInput.type = 'text';
    textInput.placeholder = 'Text eingeben...';

    const colorInput = document.createElement('input');
    colorInput.type = 'color';
    colorInput.value = '#ffffff'; // Standardfarbe: Weiß

    row.appendChild(textInput);
    row.appendChild(colorInput);

    document.getElementById('textFieldContainer').appendChild(row);

    // Hier wird zusätzlich das Overlay-Property initialisiert
    textFields.push({ textInput, colorInput, overlay: null });
}

// Erzeugt oder aktualisiert die Overlays, ohne deren Position zurückzusetzen
function updateMeme() {
    const memeContainer = document.getElementById('memeContainer');

    textFields.forEach((field, index) => {
        const textValue = field.textInput.value.trim();
        const colorValue = field.colorInput.value;

        // Falls bereits ein Overlay existiert, aktualisieren wir nur den Inhalt und die Farbe
        if (field.overlay) {
            if (textValue) {
                field.overlay.innerText = textValue;
                field.overlay.style.color = colorValue;
            } else {
                // Entferne das Overlay, wenn kein Text mehr eingegeben wurde
                field.overlay.remove();
                field.overlay = null;
            }
        } else {
            // Falls noch kein Overlay existiert und ein Text eingegeben wurde, erstelle es
            if (textValue) {
                const overlay = document.createElement('div');
                overlay.className = 'meme-text';
                overlay.innerText = textValue;
                overlay.style.color = colorValue;
                // Setze beim Erstellen eine Standardposition
                overlay.style.top = (20 + index * 50) + 'px';
                overlay.style.left = '50px';

                memeContainer.appendChild(overlay);
                field.overlay = overlay;

                // Overlay per Drag & Drop verschiebbar machen
                makeDraggable(overlay);
            }
        }
    });
}

// Funktion, um ein Element per Drag & Drop verschiebbar zu machen
function makeDraggable(element) {
    let offsetX, offsetY, isDragging = false;

    element.addEventListener("mousedown", function(e) {
        isDragging = true;
        offsetX = e.clientX - element.getBoundingClientRect().left;
        offsetY = e.clientY - element.getBoundingClientRect().top;
        element.style.cursor = "grabbing";
    });

    document.addEventListener("mousemove", function(e) {
        if (isDragging) {
            const newX = e.clientX - offsetX;
            const newY = e.clientY - offsetY;
            element.style.left = `${newX}px`;
            element.style.top = `${newY}px`;
        }
    });

    document.addEventListener("mouseup", function() {
        isDragging = false;
        element.style.cursor = "grab";
    });
}

// Lädt nur das Originalbild herunter
function downloadMeme() {
    drawMemeWithText(); // Zeichnet das Bild mit Text auf das Canvas
    const link = document.createElement("a");
    link.download = "meme.png";
    link.href = memeCanvas.toDataURL("image/png");
    link.click();
}

function drawMemeWithText() {
    ctx.clearRect(0, 0, memeCanvas.width, memeCanvas.height);
    ctx.drawImage(img, 0, 0, memeCanvas.width, memeCanvas.height);

    const textElement = document.getElementById("memeText");
    if (textElement) {
        ctx.font = "24px Arial";
        ctx.fillStyle = "white";
        ctx.textAlign = "center";
        ctx.fillText(textElement.innerText, parseInt(textElement.style.left) + 50, parseInt(textElement.style.top) + 25);
    }
}