<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Meme-Generator mit Drag & Drop</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 20px;
        }

        h1 {
            text-align: center;
        }

        /* Haupt-Container für Bild und Controls */
        .main-container {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            max-width: 1200px;
            margin: 20px auto;
            background-color: #fff;
            border: 2px solid #ccc;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.3);
            padding: 20px; /* Abstand zum Rand */
        }

        /* Container fürs Bild (mit position: relative für Overlays) */
        .meme-container {
            position: relative;
            width: 600px;       /* Feste Breite für das Meme */
            margin-right: 20px;
        }

        .meme-container img {
            width: 100%;
            height: auto;
            display: block;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0,0,0,0.3);
        }

        /* Rechte Spalte mit Eingabefeldern und Buttons */
        .controls {
            flex: 1;
            padding: 20px; /* Abstand zwischen Rand und Feldern */
        }

        /* Container für dynamische Textfelder */
        #textFieldContainer {
            margin-top: 10px;
            margin-bottom: 20px;
        }

        /* Zeile mit Text-Eingabe und Farbwähler */
        .text-field-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .text-field-row input[type="text"] {
            flex: 1;
            padding: 8px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }

        .text-field-row input[type="color"] {
            width: 50px;
            height: 34px;
            border: none;
            background: transparent;
            cursor: pointer;
            margin-right: 10px;
        }

        /* Buttons allgemein */
        .controls button {
            margin-bottom: 10px;
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            width: 100%;
        }

        .controls button:hover {
            background-color: #45a049;
        }

        /* Bereich für "Neues Meme laden" & "Meme downloaden" */
        .bottom-buttons {
            margin-top: 30px; /* Abstand zum oberen Button */
            display: flex;
            gap: 10px;        /* Abstand zwischen den Buttons */
        }

        /* Meme-Text-Overlays */
        .meme-text {
            position: absolute;   /* wichtig für freie Position */
            left: 50px;           /* Default-Startposition (x) */
            top: 20px;            /* Default-Startposition (y) */
            color: white;
            font-family: Impact, sans-serif;
            font-size: 2em;
            text-shadow: 2px 2px 2px black;
            cursor: move;         /* Zeige "Move-Cursor" an */
            white-space: nowrap;  /* in einer Zeile anzeigen */
            user-select: none;    /* verhindert Textmarkierung beim Ziehen */
        }
    </style>
</head>
<body>

<h1>Dein zufälliges Meme</h1>

<div class="main-container">
    <!-- MEME-CONTAINER (Bild + Overlays) -->
    <div class="meme-container" id="memeContainer">
        <img th:src="@{${memePath}}"
             id="memeImage"
             alt="Meme wird geladen..." />
        <!-- Overlays werden per JS eingefügt -->
    </div>

    <!-- RECHTE SPALTE: Eingabefelder & Buttons -->
    <div class="controls">
        <!-- Button zum Hinzufügen neuer Textfelder -->
        <button onclick="addTextField()">Neues Textfeld hinzufügen</button>

        <!-- Container für die dynamischen Textfelder -->
        <div id="textFieldContainer"></div>

        <!-- Buttons -->
        <button onclick="updateMeme()">Update Meme</button>
        <button>Speichern</button> <!-- Platzhalter-Funktion -->

        <!-- Unten mit etwas Abstand -->
        <div class="bottom-buttons">
            <button onclick="window.location.reload();">Neues Meme laden</button>
            <button onclick="downloadMeme()">Meme downloaden</button>
        </div>
    </div>
</div>

<script>
    // Array, in dem wir alle (TextInput, ColorInput) speichern
    let textFields = [];

    // Beim Laden der Seite direkt ein Textfeld hinzufügen
    window.onload = function() {
        addTextField();
    };

    // Neues Textfeld (Text + Farbe) hinzufügen
    function addTextField() {
        const row = document.createElement('div');
        row.className = 'text-field-row';

        const textInput = document.createElement('input');
        textInput.type = 'text';
        textInput.placeholder = 'Text eingeben...';

        const colorInput = document.createElement('input');
        colorInput.type = 'color';
        colorInput.value = '#ffffff'; // Standard: weiß

        row.appendChild(textInput);
        row.appendChild(colorInput);

        document.getElementById('textFieldContainer').appendChild(row);

        textFields.push({ textInput, colorInput });
    }

    // Erzeugt die Overlays neu und macht sie draggable
    function updateMeme() {
        const memeContainer = document.getElementById('memeContainer');

        // Alte Overlays entfernen
        const oldOverlays = memeContainer.querySelectorAll('.meme-text');
        oldOverlays.forEach(el => el.remove());

        // Für jedes Textfeld ein Overlay erstellen
        textFields.forEach((field, index) => {
            const textValue = field.textInput.value.trim();
            const colorValue = field.colorInput.value;

            if (textValue) {
                const overlay = document.createElement('div');
                overlay.className = 'meme-text';
                overlay.innerText = textValue;
                overlay.style.color = colorValue;

                // Startposition für jeden Text (leicht versetzt)
                // Du kannst hier anpassen, wie du es möchtest:
                overlay.style.top = (20 + index * 50) + 'px';
                overlay.style.left = '50px';

                memeContainer.appendChild(overlay);

                // Jetzt Overlay verschiebbar machen
                makeDraggable(overlay, memeContainer);
            }
        });
    }

    // Funktion, um ein Element draggable zu machen
    function makeDraggable(element, container) {
        let offsetX, offsetY;

        // Wenn man auf das Element klickt
        element.addEventListener('mousedown', function(e) {
            e.preventDefault();

            // Aktuelle Position des Elements und Mauszeiger
            const rect = element.getBoundingClientRect();
            // Abstand zwischen Mausposition und Element-Position
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;

            // Mousemove-Listener auf das Dokument, um das Element zu bewegen
            function onMouseMove(e) {
                // Position relativ zum Container
                const containerRect = container.getBoundingClientRect();

                // Neue Koordinaten = Maus - Offset - Container-Offset
                let newLeft = e.clientX - offsetX - containerRect.left;
                let newTop  = e.clientY - offsetY - containerRect.top;

                // Optional: Grenzen setzen, damit der Text nicht aus dem Bild läuft
                // z.B. minimal 0, maximal containerBreite - ElementBreite
                const maxLeft = containerRect.width - element.offsetWidth;
                const maxTop  = containerRect.height - element.offsetHeight;

                if (newLeft < 0) newLeft = 0;
                if (newTop < 0) newTop = 0;
                if (newLeft > maxLeft) newLeft = maxLeft;
                if (newTop > maxTop) newTop = maxTop;

                element.style.left = newLeft + 'px';
                element.style.top  = newTop  + 'px';
            }

            document.addEventListener('mousemove', onMouseMove);

            // Mouseup => Drag-Ende
            document.addEventListener('mouseup', function() {
                document.removeEventListener('mousemove', onMouseMove);
            }, { once: true });
        });
    }

    // Lädt nur das Original-Bild herunter
    function downloadMeme() {
        const memeImage = document.getElementById('memeImage');
        const imageURL = memeImage.src;

        const link = document.createElement('a');
        link.href = imageURL;
        link.download = 'meme.jpg'; // oder meme.png
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

</body>
</html>
